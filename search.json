[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "A dck of cards demo of nbdev based on ideas from Think Python 2nd Edition by Allen B. Downey.",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "nbdev_cards",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/milanstepanov/nbdev_cards.git\nor from conda\n$ conda install -c milanstepanov nbdev_cards\nor from pypi\n$ pip install nbdev_cards\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nThe lib provides Card class you can use to create, display, and compare cards:\n\nCard(1,3)\n\n3♥\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♠', '♥', '♦', '♣']",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nInitialize self. See help(type(self)) for accurate signature.\nWhen we initially create a deck, all of the cards will be present:\n\ndeck = Deck()\ndeck\n\nA♠;2♠;3♠;4♠;5♠;6♠;7♠;8♠;9♠;10♠;J♠;Q♠;K♠;A♥;2♥;3♥;4♥;5♥;6♥;7♥;8♥;9♥;10♥;J♥;Q♥;K♥;A♦;2♦;3♦;4♦;5♦;6♦;7♦;8♦;9♦;10♦;J♦;Q♦;K♦;A♣;2♣;3♣;4♣;5♣;6♣;7♣;8♣;9♣;10♣;J♣;Q♣;K♣\n\n\n\nassert len(deck) == 52\n\nAs a reminder, these are the suits we defined for a Card\n\nsuits\n\n['♠', '♥', '♦', '♣']\n\n\nWe can check if, Ace of Heart is in the deck:\n\nCard(1,1) in deck\n\nTrue\n\n\nWe can remove a card from the deck:\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\n\nremoved_card = deck.pop()\nprint(removed_card)\n\nK♣\n\n\nCheck if we really removed a card:\n\nassert len(deck) == 51",
    "crumbs": [
      "deck"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card–A basic playing card",
    "section": "",
    "text": "We will be using numbers to represent playing card clubs and ranks. These are the suits:\n\nsuits\n\n['♠', '♥', '♦', '♣']\n\n\n\nsuits[0]\n\n'♠'\n\n\nThese are the ranks:\n\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\nFor instance the rank at index 1 (note that there isn’t a plyaing card at position 0, since we want the ranks to match the indices where posible):\n\nranks[1]\n\n'A'\n\n\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\nHere’s an example of creating and displaying a card:\n\nc = Card(suit=1, rank=2)\nc\n\n2♥\n\n\n\nprint(c)\n\n2♥\n\n\n\n## Comparison operators\n\nEquality, less than, and greater than work on the rank and suit indices.\nFor instance, here’s some tests for equality…\n\nprint(Card(1,1) == Card(1,2))\nprint(Card(1,1) == Card(2,1))\nprint(Card(1,2) == Card(1,2))\n\nFalse\nFalse\nTrue\n\n\n… and a test of &lt; …\n\nprint(Card(suit=1, rank=1) &lt; Card(suit=1, rank=2))\nprint(Card(suit=1, rank=3) &lt; Card(suit=1, rank=2))\n\nTrue\nFalse",
    "crumbs": [
      "card--A basic playing card"
    ]
  }
]